// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth Models
model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(uuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  trips         Trip[]    // A user can have multiple trips
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Trip {
  id          String   @id @default(uuid())
  name        String
  description String?  // Optional description
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  stays       Stay[]   // One Trip can have multiple Stays
  
  // Relationship to User
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
}

model Stay {
  id             String   @id @default(uuid())
  location       String   // City/village name
  address        String
  arrivalDate    DateTime // Store as DateTime
  departureDate  DateTime // Store as DateTime
  notes          String?  // Optional field for general information
  arrivalNotes   String?  // Optional notes specific to arrival
  departureNotes String?  // Optional notes specific to departure
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  // Relationship to Trip
  trip           Trip     @relation(fields: [tripId], references: [id], onDelete: Cascade)
  tripId         String
}
