// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth Models
model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                String           @id @default(uuid())
  name              String?
  email             String?          @unique
  emailVerified     DateTime?
  image             String?
  accounts          Account[]
  sessions          Session[]
  trips             TripUser[]        // Many-to-many relation with trips
  ownedTrips        Trip[]           @relation("TripOwner") // Trips this user created/owns
  receivedInvites   TripInvitation[] @relation("InvitedUser")
  sentInvites       TripInvitation[] @relation("InvitingSender")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Trip {
  id            String           @id @default(uuid())
  name          String
  description   String?          // Optional description
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  stays         Stay[]           // One Trip can have multiple Stays
  invitations   TripInvitation[] // Trip invitations
  users         TripUser[]       // Many-to-many relation with users
  
  // Relationship to Owner User (who created the trip)
  owner         User             @relation("TripOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId       String
}

// Join table for many-to-many relationship between User and Trip
model TripUser {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  trip      Trip     @relation(fields: [tripId], references: [id], onDelete: Cascade)
  tripId    String
  createdAt DateTime @default(now())
  role      String   @default("member") // "member" or "guest"
  
  // Each user can only be added to a trip once
  @@unique([userId, tripId])
}

model Stay {
  id                 String    @id @default(uuid())
  location           String    // City/village name
  address            String
  arrivalDate        DateTime  // Store as DateTime
  departureDate      DateTime  // Store as DateTime
  arrivalTime        String?   // Optional time in HH:MM format
  departureTime      String?   // Optional time in HH:MM format
  notes              String?   // Optional field for general information
  arrivalNotes       String?   // Optional notes specific to arrival
  departureNotes     String?   // Optional notes specific to departure
  arrivalConfirmed   Boolean   @default(false) // Non-nullable with default false
  departureConfirmed Boolean   @default(false) // Non-nullable with default false
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  
  // Relationship to Trip
  trip               Trip      @relation(fields: [tripId], references: [id], onDelete: Cascade)
  tripId             String
  
  // Relationship to Contacts
  contacts           Contact[]
}

// New Contact model for stay contacts
model Contact {
  id        String   @id @default(uuid())
  name      String
  phone     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relationship to Stay
  stay      Stay     @relation(fields: [stayId], references: [id], onDelete: Cascade)
  stayId    String
}

// TripInvitation model for inviting users to trips
model TripInvitation {
  id        String   @id @default(uuid())
  email     String   // Email of the invited user
  status    String   @default("pending") // pending, accepted, declined
  role      String   @default("member") // "member" or "guest"
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  trip      Trip     @relation(fields: [tripId], references: [id], onDelete: Cascade)
  tripId    String
  
  // Relation to the User that sent the invitation
  sender    User     @relation("InvitingSender", fields: [senderId], references: [id], onDelete: Cascade)
  senderId  String
  
  // Relation to the User that received the invitation (optional, may not exist yet)
  invitee   User?    @relation("InvitedUser", fields: [inviteeId], references: [id], onDelete: SetNull)
  inviteeId String?
}
